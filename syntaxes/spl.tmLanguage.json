{
	"information_for_contributors": [
		"This code is based on the language support of C, created by GitHub user jeff-hykin",
		"see https://github.com/jeff-hykin/cpp-textmate-grammar/blob/master"
	  ],
	"name": "SPL",
	"scopeName": "source.spl",
	"fileTypes": [
		"spl"
	],
	"patterns": [
		{
			"include": "#comments"
		},
		{
			"include": "#keywords"
		},
		{
			"include": "#storage_types"
		},
		{
			"include": "#bools"
		},
		{
			"include": "#function_type"
		},
		{
			"include": "#function_arrow"
		},
		{
			"include": "#operators"
		},
		{
			"include": "#numbers"
		},
		{
			"include": "#strings"
		},
		{
			"include": "#block"
		},
		{
			"include": "#parens"
		},
		{
			"include": "#spl_function"
		},
		{
			"include": "#line_continuation_character"
		},
		{
			"include": "#empty_list"
		},
		{
			"include": "#semicolon"
		},
		{
			"include": "#comma"
		},
		{
			"include": "#cons"
		},
		{
			"include": "#field_expr"
		}
	],
	"repository": {
		"spl_function": {
			"name": "meta.function.spl",
			"begin": "(?<!\\w)(?!\\s*(?:return|False|while|else|Bool|True|Void|Char|Int|var|if)\\s*\\()(?=[a-zA-Z_]\\w*\\s*\\()",
			"end": "(?!\\G)(?<=\\))",
			"patterns": [
				{
					"include": "#function-innards"
				}
			]
		},
		"function_type": {
			"name": "meta.function.type.spl",
			"begin": "(::)",
			"end": "(?={)",
			"beginCaptures": {
				"1": {
					"name": "punctuation.function.type.spl"
				}
			},
			"patterns": [
				{
					"include": "#fun_type"
				}
			]
		},
		"fun_type": {
			"name": "meta.function.type.type.spl",
			"patterns": [
				
				{
					"include": "#parens_type"
				},
				{
					"include": "#storage_types"
				},
				{
					"include": "#parametertype"
				},
				{
					"include": "#function_arrow"
				},
				{
					"include": "#brackets_type"
				},
				{
					"include": "$self"
				}
			]
		},
		"parens_type": {
			"name": "meta.parens.type.spl",
			"begin": "\\(",
			"beginCaptures": {
				"0": {
					"name": "punctuation.section.parens.begin.bracket.round.spl"
				}
			},
			"end": "\\)",
			"endCaptures": {
				"0": {
					"name": "punctuation.section.parens.end.bracket.round.spl"
				}
			},
			"patterns": [
				{
					"include": "#fun_type"
				},
				{
					"include": "$self"
				}
			]
		},
		"brackets_type": {
			"name": "meta.bracket.square.spl",
			"begin": "(\\[)(?!\\])",
			"beginCaptures": {
				"1": {
					"name": "punctuation.definition.begin.bracket.square.spl"
				}
			},
			"end": "\\]",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.end.bracket.square.spl"
				}
			},
			"patterns": [
				{
					"include": "#storage_types"
				},
				{
					"include": "#parameter"
				}
			]
		},
		"field_expr": {
			"name": "meta.field.expr.spl",
			"match": "([a-zA-Z_][a-zA-Z_0-9]*)(\\.)([a-z]*)",
			"captures": {
				"2": {
				"name": "punctuation.separator.delimiter.spl"
				},
				"3": {
				"name": "entity.name.predefined.function.spl"
				}
			}
		},
		"empty_list": {
			"name": "storage.modifier.array.bracket.square.spl",
			"match": "\\[\\s*\\]"
		},		
		"parens": {
			"name": "meta.parens.spl",
			"begin": "\\(",
			"beginCaptures": {
				"0": {
					"name": "punctuation.section.parens.begin.bracket.round.spl"
				}
			},
			"end": "\\)",
			"endCaptures": {
				"0": {
					"name": "punctuation.section.parens.end.bracket.round.spl"
				}
			},
			"patterns": [
				{
					"include": "$self"
				}
			]
		},
		"parens-block": {
			"name": "meta.parens.block.spl",
			"begin": "\\(",
			"beginCaptures": {
				"0": {
					"name": "punctuation.section.parens.begin.bracket.round.spl"
				}
			},
			"end": "\\)",
			"endCaptures": {
				"0": {
					"name": "punctuation.section.parens.end.bracket.round.spl"
				}
			},
			"patterns": [
				{
					"include": "#block_innards"
				},
				{
					"match": "(?-mix:(?<!:):(?!:))",
					"name": "punctuation.range-based.spl"
				}
			]
		},
		"block": {
			"patterns": [
				{
					"begin": "{",
					"beginCaptures": {
						"0": {
							"name": "punctuation.section.block.begin.bracket.curly.spl"
						}
					},
					"end": "}",
					"endCaptures": {
						"0": {
							"name": "punctuation.section.block.end.bracket.curly.spl"
						}
					},
					"name": "meta.block.spl",
					"patterns": [
						{
							"include": "#block_innards"
						}
					]
				}
			]
		},
		"block_comment": {
			"patterns": [
				{
					"begin": "\\s*+(\\/\\*)",
					"end": "\\*\\/",
					"beginCaptures": {
						"1": {
							"name": "punctuation.definition.comment.begin.spl"
						}
					},
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.comment.end.spl"
						}
					},
					"name": "comment.block.spl"
				}
			]
		},
		"block_innards": {
			"patterns": [
				{
					"include": "#spl_function_call"
				},
				{
					"name": "meta.initialization.spl",
					"begin": "(?x)\n(?:\n  (?:\n\t(?=\\s)(?<!else|new|return)\n\t(?<=\\w) \\s+(and|and_eq|bitand|bitor|compl|not|not_eq|or|or_eq|typeid|xor|xor_eq|alignof|alignas)  # or word + space before name\n  )\n)\n(\n  (?:[A-Za-z_][A-Za-z0-9_]*+ | :: )++   # actual name\n  |\n  (?:(?<=operator) (?:[-*&<>=+!]+ | \\(\\) | \\[\\]))\n)\n\\s*(\\() # opening bracket",
					"beginCaptures": {
						"1": {
							"name": "variable.other.spl"
						},
						"2": {
							"name": "punctuation.section.parens.begin.bracket.round.initialization.spl"
						}
					},
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "punctuation.section.parens.end.bracket.round.initialization.spl"
						}
					},
					"patterns": [
						{
							"include": "#function-call-innards"
						}
					]
				},
				{
					"begin": "{",
					"beginCaptures": {
						"0": {
							"name": "punctuation.section.block.begin.bracket.curly.spl"
						}
					},
					"end": "}",
					"endCaptures": {
						"0": {
							"name": "punctuation.section.block.end.bracket.curly.spl"
						}
					},
					"patterns": [
						{
							"include": "#block_innards"
						}
					]
				},
				{
					"include": "#parens-block"
				},
				{
					"include": "$self"
				}
			]
		},
		"spl_function_call": {
			"begin": "(?!(?:while|if|else|return)\\s*\\()(?=(?:[A-Za-z_][A-Za-z0-9_]*+)++\\s*\\()",
			"end": "(?<=\\))(?!\\w)",
			"name": "meta.function-call.spl",
			"patterns": [
				{
					"include": "#function-call-innards"
				}
			]
		},
		"function-call-innards": {
			"patterns": [
				{
					"include": "#comments"
				},
				{
					"include": "#storage_types"
				},
				{
					"include": "#method_access"
				},
				{
					"include": "#member_access"
				},
				{
					"include": "#operators"
				},
				{
					"begin": "(?x)\n(?!(?:while|if|else|return)\\s*\\()\n(\n(?:[A-Za-z_][A-Za-z0-9_]*+)++  # actual name\n)\n\\s*(\\()",
					"beginCaptures": {
						"1": {
							"name": "entity.name.function.spl"
						},
						"2": {
							"name": "punctuation.section.arguments.begin.bracket.round.spl"
						}
					},
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "punctuation.section.arguments.end.bracket.round.spl"
						}
					},
					"patterns": [
						{
							"include": "#function-call-innards"
						}
					]
				},
				{
					"begin": "\\(",
					"beginCaptures": {
						"0": {
							"name": "punctuation.section.parens.begin.bracket.round.spl"
						}
					},
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "punctuation.section.parens.end.bracket.round.spl"
						}
					},
					"patterns": [
						{
							"include": "#function-call-innards"
						}
					]
				},
				{
					"include": "#block_innards"
				}
			]
		},
		"function-innards": {
			"patterns": [
				{
					"include": "#comments"
				},
				{
					"name": "meta.function.definition.parameters.spl",
					"begin": "(?x)\n(?!(?:while|if|else|return)\\s*\\()\n(\n(?:[A-Za-z_][A-Za-z0-9_]*+)++  # actual name\n)\n\\s*(\\()",
					"beginCaptures": {
						"1": {
							"name": "entity.name.function.spl"
						},
						"2": {
							"name": "punctuation.section.parameters.begin.bracket.round.spl"
						}
					},
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "punctuation.section.parameters.end.bracket.round.spl"
						}
					},
					"patterns": [
						{
							"include": "#parameter"
						},
						{
							"include": "#function-innards"
						}
					]
				},
				{
					"begin": "\\(",
					"beginCaptures": {
						"0": {
							"name": "punctuation.section.parens.begin.bracket.round.spl"
						}
					},
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "punctuation.section.parens.end.bracket.round.spl"
						}
					},
					"patterns": [
						{
							"include": "#function-innards"
						}
					]
				},
				{
					"include": "$self"
				}
			]
		},
		"comments": {
			"patterns": [
				{
					"patterns": [
						{
							"patterns": [
								{
									"name": "comment.line.double-slash.documentation.spl",
									"begin": "(?:^)(?>\\s*)(\\/\\/[!\\/]+)",
									"beginCaptures": {
										"1": {
											"name": "punctuation.definition.comment.documentation.spl"
										}
									},
									"end": "(?<=\\n)(?<!\\\\\\n)",
									"patterns": [
										{
											"include": "#line_continuation_character"
										},
										{
											"match": "(?<=[\\s*!\\/])[\\\\@](?:callergraph|callgraph|else|endif|f\\$|f\\[|f\\]|hidecallergraph|hidecallgraph|hiderefby|hiderefs|hideinitializer|htmlinclude|n|nosubgrouping|private|privatesection|protected|protectedsection|public|publicsection|pure|showinitializer|showrefby|showrefs|tableofcontents|\\$|\\#|<|>|%|\"|\\.|=|::|\\||\\-\\-|\\-\\-\\-)\\b(?:\\{[^}]*\\})?",
											"name": "storage.type.class.doxygen.spl"
										},
										{
											"match": "((?<=[\\s*!\\/])[\\\\@](?:a|em|e))\\s+(\\S+)",
											"captures": {
												"1": {
													"name": "storage.type.class.doxygen.spl"
												},
												"2": {
													"name": "markup.italic.doxygen.spl"
												}
											}
										},
										{
											"match": "((?<=[\\s*!\\/])[\\\\@]b)\\s+(\\S+)",
											"captures": {
												"1": {
													"name": "storage.type.class.doxygen.spl"
												},
												"2": {
													"name": "markup.bold.doxygen.spl"
												}
											}
										},
										{
											"match": "((?<=[\\s*!\\/])[\\\\@](?:c|p))\\s+(\\S+)",
											"captures": {
												"1": {
													"name": "storage.type.class.doxygen.spl"
												},
												"2": {
													"name": "markup.inline.raw.string.spl"
												}
											}
										},
										{
											"match": "(?<=[\\s*!\\/])[\\\\@](?:a|anchor|b|c|cite|copybrief|copydetail|copydoc|def|dir|dontinclude|e|em|emoji|enum|example|extends|file|idlexcept|implements|include|includedoc|includelineno|latexinclude|link|memberof|namespace|p|package|ref|refitem|related|relates|relatedalso|relatesalso|verbinclude)\\b(?:\\{[^}]*\\})?",
											"name": "storage.type.class.doxygen.spl"
										},
										{
											"match": "(?<=[\\s*!\\/])[\\\\@](?:addindex|addtogroup|category|class|defgroup|diafile|dotfile|elseif|fn|headerfile|if|ifnot|image|ingroup|interface|line|mainpage|mscfile|name|overload|page|property|protocol|section|skip|skipline|snippet|snippetdoc|snippetlineno|struct|subpage|subsection|subsubsection|typedef|union|until|vhdlflow|weakgroup)\\b(?:\\{[^}]*\\})?",
											"name": "storage.type.class.doxygen.spl"
										},
										{
											"match": "((?<=[\\s*!\\/])[\\\\@]param)(?:\\s*\\[((?:,?\\s*(?:in|out)\\s*)+)\\])?\\s+(\\b\\w+\\b)",
											"captures": {
												"1": {
													"name": "storage.type.class.doxygen.spl"
												},
												"2": {
													"patterns": [
														{
															"match": "in|out",
															"name": "keyword.other.parameter.direction.$0.spl"
														}
													]
												},
												"3": {
													"name": "variable.parameter.spl"
												}
											}
										},
										{
											"match": "(?<=[\\s*!\\/])[\\\\@](?:arg|attention|author|authors|brief|bug|copyright|date|deprecated|details|exception|invariant|li|note|par|paragraph|param|post|pre|remark|remarks|result|return|returns|retval|sa|see|short|since|test|throw|todo|tparam|version|warning|xrefitem)\\b(?:\\{[^}]*\\})?",
											"name": "storage.type.class.doxygen.spl"
										},
										{
											"match": "(?<=[\\s*!\\/])[\\\\@](?:code|cond|docbookonly|dot|htmlonly|internal|latexonly|link|manonly|msc|parblock|rtfonly|secreflist|uml|verbatim|xmlonly|endcode|endcond|enddocbookonly|enddot|endhtmlonly|endinternal|endlatexonly|endlink|endmanonly|endmsc|endparblock|endrtfonly|endsecreflist|enduml|endverbatim|endxmlonly)\\b(?:\\{[^}]*\\})?",
											"name": "storage.type.class.doxygen.spl"
										},
										{
											"match": "(?:\\b[A-Z]+:|@[a-z_]+:)",
											"name": "storage.type.class.gtkdoc"
										}
									]
								},
								{
									"match": "(\\/\\*[!*]+(?=\\s))(.+)([!*]*\\*\\/)",
									"captures": {
										"1": {
											"name": "punctuation.definition.comment.begin.documentation.spl"
										},
										"2": {
											"patterns": [
												{
													"match": "(?<=[\\s*!\\/])[\\\\@](?:callergraph|callgraph|else|endif|f\\$|f\\[|f\\]|hidecallergraph|hidecallgraph|hiderefby|hiderefs|hideinitializer|htmlinclude|n|nosubgrouping|private|privatesection|protected|protectedsection|public|publicsection|pure|showinitializer|showrefby|showrefs|tableofcontents|\\$|\\#|<|>|%|\"|\\.|=|::|\\||\\-\\-|\\-\\-\\-)\\b(?:\\{[^}]*\\})?",
													"name": "storage.type.class.doxygen.spl"
												},
												{
													"match": "((?<=[\\s*!\\/])[\\\\@](?:a|em|e))\\s+(\\S+)",
													"captures": {
														"1": {
															"name": "storage.type.class.doxygen.spl"
														},
														"2": {
															"name": "markup.italic.doxygen.spl"
														}
													}
												},
												{
													"match": "((?<=[\\s*!\\/])[\\\\@]b)\\s+(\\S+)",
													"captures": {
														"1": {
															"name": "storage.type.class.doxygen.spl"
														},
														"2": {
															"name": "markup.bold.doxygen.spl"
														}
													}
												},
												{
													"match": "((?<=[\\s*!\\/])[\\\\@](?:c|p))\\s+(\\S+)",
													"captures": {
														"1": {
															"name": "storage.type.class.doxygen.spl"
														},
														"2": {
															"name": "markup.inline.raw.string.spl"
														}
													}
												},
												{
													"match": "(?<=[\\s*!\\/])[\\\\@](?:a|anchor|b|c|cite|copybrief|copydetail|copydoc|def|dir|dontinclude|e|em|emoji|enum|example|extends|file|idlexcept|implements|include|includedoc|includelineno|latexinclude|link|memberof|namespace|p|package|ref|refitem|related|relates|relatedalso|relatesalso|verbinclude)\\b(?:\\{[^}]*\\})?",
													"name": "storage.type.class.doxygen.spl"
												},
												{
													"match": "(?<=[\\s*!\\/])[\\\\@](?:addindex|addtogroup|category|class|defgroup|diafile|dotfile|elseif|fn|headerfile|if|ifnot|image|ingroup|interface|line|mainpage|mscfile|name|overload|page|property|protocol|section|skip|skipline|snippet|snippetdoc|snippetlineno|struct|subpage|subsection|subsubsection|typedef|union|until|vhdlflow|weakgroup)\\b(?:\\{[^}]*\\})?",
													"name": "storage.type.class.doxygen.spl"
												},
												{
													"match": "((?<=[\\s*!\\/])[\\\\@]param)(?:\\s*\\[((?:,?\\s*(?:in|out)\\s*)+)\\])?\\s+(\\b\\w+\\b)",
													"captures": {
														"1": {
															"name": "storage.type.class.doxygen.spl"
														},
														"2": {
															"patterns": [
																{
																	"match": "in|out",
																	"name": "keyword.other.parameter.direction.$0.spl"
																}
															]
														},
														"3": {
															"name": "variable.parameter.spl"
														}
													}
												},
												{
													"match": "(?<=[\\s*!\\/])[\\\\@](?:arg|attention|author|authors|brief|bug|copyright|date|deprecated|details|exception|invariant|li|note|par|paragraph|param|post|pre|remark|remarks|result|return|returns|retval|sa|see|short|since|test|throw|todo|tparam|version|warning|xrefitem)\\b(?:\\{[^}]*\\})?",
													"name": "storage.type.class.doxygen.spl"
												},
												{
													"match": "(?<=[\\s*!\\/])[\\\\@](?:code|cond|docbookonly|dot|htmlonly|internal|latexonly|link|manonly|msc|parblock|rtfonly|secreflist|uml|verbatim|xmlonly|endcode|endcond|enddocbookonly|enddot|endhtmlonly|endinternal|endlatexonly|endlink|endmanonly|endmsc|endparblock|endrtfonly|endsecreflist|enduml|endverbatim|endxmlonly)\\b(?:\\{[^}]*\\})?",
													"name": "storage.type.class.doxygen.spl"
												},
												{
													"match": "(?:\\b[A-Z]+:|@[a-z_]+:)",
													"name": "storage.type.class.gtkdoc"
												}
											]
										},
										"3": {
											"name": "punctuation.definition.comment.end.documentation.spl"
										}
									},
									"name": "comment.block.documentation.spl"
								},
								{
									"name": "comment.block.documentation.spl",
									"begin": "((?>\\s*)\\/\\*[!*]+(?:(?:\\n|$)|(?=\\s)))",
									"beginCaptures": {
										"1": {
											"name": "punctuation.definition.comment.begin.documentation.spl"
										}
									},
									"end": "([!*]*\\*\\/)",
									"endCaptures": {
										"1": {
											"name": "punctuation.definition.comment.end.documentation.spl"
										}
									},
									"patterns": [
										{
											"match": "(?<=[\\s*!\\/])[\\\\@](?:callergraph|callgraph|else|endif|f\\$|f\\[|f\\]|hidecallergraph|hidecallgraph|hiderefby|hiderefs|hideinitializer|htmlinclude|n|nosubgrouping|private|privatesection|protected|protectedsection|public|publicsection|pure|showinitializer|showrefby|showrefs|tableofcontents|\\$|\\#|<|>|%|\"|\\.|=|::|\\||\\-\\-|\\-\\-\\-)\\b(?:\\{[^}]*\\})?",
											"name": "storage.type.class.doxygen.spl"
										},
										{
											"match": "((?<=[\\s*!\\/])[\\\\@](?:a|em|e))\\s+(\\S+)",
											"captures": {
												"1": {
													"name": "storage.type.class.doxygen.spl"
												},
												"2": {
													"name": "markup.italic.doxygen.spl"
												}
											}
										},
										{
											"match": "((?<=[\\s*!\\/])[\\\\@]b)\\s+(\\S+)",
											"captures": {
												"1": {
													"name": "storage.type.class.doxygen.spl"
												},
												"2": {
													"name": "markup.bold.doxygen.spl"
												}
											}
										},
										{
											"match": "((?<=[\\s*!\\/])[\\\\@](?:c|p))\\s+(\\S+)",
											"captures": {
												"1": {
													"name": "storage.type.class.doxygen.spl"
												},
												"2": {
													"name": "markup.inline.raw.string.spl"
												}
											}
										},
										{
											"match": "(?<=[\\s*!\\/])[\\\\@](?:a|anchor|b|c|cite|copybrief|copydetail|copydoc|def|dir|dontinclude|e|em|emoji|enum|example|extends|file|idlexcept|implements|include|includedoc|includelineno|latexinclude|link|memberof|namespace|p|package|ref|refitem|related|relates|relatedalso|relatesalso|verbinclude)\\b(?:\\{[^}]*\\})?",
											"name": "storage.type.class.doxygen.spl"
										},
										{
											"match": "(?<=[\\s*!\\/])[\\\\@](?:addindex|addtogroup|category|class|defgroup|diafile|dotfile|elseif|fn|headerfile|if|ifnot|image|ingroup|interface|line|mainpage|mscfile|name|overload|page|property|protocol|section|skip|skipline|snippet|snippetdoc|snippetlineno|struct|subpage|subsection|subsubsection|typedef|union|until|vhdlflow|weakgroup)\\b(?:\\{[^}]*\\})?",
											"name": "storage.type.class.doxygen.spl"
										},
										{
											"match": "((?<=[\\s*!\\/])[\\\\@]param)(?:\\s*\\[((?:,?\\s*(?:in|out)\\s*)+)\\])?\\s+(\\b\\w+\\b)",
											"captures": {
												"1": {
													"name": "storage.type.class.doxygen.spl"
												},
												"2": {
													"patterns": [
														{
															"match": "in|out",
															"name": "keyword.other.parameter.direction.$0.spl"
														}
													]
												},
												"3": {
													"name": "variable.parameter.spl"
												}
											}
										},
										{
											"match": "(?<=[\\s*!\\/])[\\\\@](?:arg|attention|author|authors|brief|bug|copyright|date|deprecated|details|exception|invariant|li|note|par|paragraph|param|post|pre|remark|remarks|result|return|returns|retval|sa|see|short|since|test|throw|todo|tparam|version|warning|xrefitem)\\b(?:\\{[^}]*\\})?",
											"name": "storage.type.class.doxygen.spl"
										},
										{
											"match": "(?<=[\\s*!\\/])[\\\\@](?:code|cond|docbookonly|dot|htmlonly|internal|latexonly|link|manonly|msc|parblock|rtfonly|secreflist|uml|verbatim|xmlonly|endcode|endcond|enddocbookonly|enddot|endhtmlonly|endinternal|endlatexonly|endlink|endmanonly|endmsc|endparblock|endrtfonly|endsecreflist|enduml|endverbatim|endxmlonly)\\b(?:\\{[^}]*\\})?",
											"name": "storage.type.class.doxygen.spl"
										},
										{
											"match": "(?:\\b[A-Z]+:|@[a-z_]+:)",
											"name": "storage.type.class.gtkdoc"
										}
									]
								},
								{
									"match": "^\\/\\* =(\\s*.*?)\\s*= \\*\\/$\\n?",
									"captures": {
										"1": {
											"name": "meta.toc-list.banner.block.spl"
										}
									},
									"name": "comment.block.banner.spl"
								},
								{
									"name": "comment.block.spl",
									"begin": "(\\/\\*)",
									"beginCaptures": {
										"1": {
											"name": "punctuation.definition.comment.begin.spl"
										}
									},
									"end": "(\\*\\/)",
									"endCaptures": {
										"1": {
											"name": "punctuation.definition.comment.end.spl"
										}
									}
								},
								{
									"match": "^\\/\\/ =(\\s*.*?)\\s*=$\\n?",
									"captures": {
										"1": {
											"name": "meta.toc-list.banner.line.spl"
										}
									},
									"name": "comment.line.banner.spl"
								},
								{
									"begin": "((?:^[ \\t]+)?)(?=\\/\\/)",
									"beginCaptures": {
										"1": {
											"name": "punctuation.whitespace.comment.leading.spl"
										}
									},
									"end": "(?!\\G)",
									"patterns": [
										{
											"name": "comment.line.double-slash.spl",
											"begin": "(\\/\\/)",
											"beginCaptures": {
												"1": {
													"name": "punctuation.definition.comment.spl"
												}
											},
											"end": "(?=\\n)",
											"patterns": [
												{
													"include": "#line_continuation_character"
												}
											]
										}
									]
								}
							]
						},
						{
							"include": "#block_comment"
						},
						{
							"include": "#line_comment"
						}
					]
				},
				{
					"include": "#block_comment"
				},
				{
					"include": "#line_comment"
				}
			]
		},
		"inline_comment": {
			"patterns": [
				{
					"patterns": [
						{
							"match": "(\\/\\*)((?>(?:[^\\*]|(?>\\*+)[^\\/])*)((?>\\*+)\\/))",
							"captures": {
								"1": {
									"name": "comment.block.spl punctuation.definition.comment.begin.spl"
								},
								"2": {
									"name": "comment.block.spl"
								},
								"3": {
									"patterns": [
										{
											"match": "\\*\\/",
											"name": "comment.block.spl punctuation.definition.comment.end.spl"
										},
										{
											"match": "\\*",
											"name": "comment.block.spl"
										}
									]
								}
							}
						},
						{
							"match": "(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/))",
							"captures": {
								"1": {
									"name": "comment.block.spl punctuation.definition.comment.begin.spl"
								},
								"2": {
									"name": "comment.block.spl"
								},
								"3": {
									"patterns": [
										{
											"match": "\\*\\/",
											"name": "comment.block.spl punctuation.definition.comment.end.spl"
										},
										{
											"match": "\\*",
											"name": "comment.block.spl"
										}
									]
								}
							}
						}
					]
				},
				{
					"match": "(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/))",
					"captures": {
						"1": {
							"name": "comment.block.spl punctuation.definition.comment.begin.spl"
						},
						"2": {
							"name": "comment.block.spl"
						},
						"3": {
							"patterns": [
								{
									"match": "\\*\\/",
									"name": "comment.block.spl punctuation.definition.comment.end.spl"
								},
								{
									"match": "\\*",
									"name": "comment.block.spl"
								}
							]
						}
					}
				}
			]
		},
		"line_comment": {
			"patterns": [
				{
					"begin": "\\s*+(\\/\\/)",
					"end": "(?<=\\n)(?<!\\\\\\n)",
					"beginCaptures": {
						"1": {
							"name": "punctuation.definition.comment.spl"
						}
					},
					"endCaptures": {},
					"name": "comment.line.double-slash.spl",
					"patterns": [
						{
							"include": "#line_continuation_character"
						}
					]
				},
				{
					"begin": "\\s*+(\\/\\/)",
					"end": "(?<=\\n)(?<!\\\\\\n)",
					"beginCaptures": {
						"1": {
							"name": "punctuation.definition.comment.spl"
						}
					},
					"endCaptures": {},
					"name": "comment.line.double-slash.spl",
					"patterns": [
						{
							"include": "#line_continuation_character"
						}
					]
				}
			]
		},
		"line_continuation_character": {
			"patterns": [
				{
					"match": "(\\\\)\\n",
					"captures": {
						"1": {
							"name": "constant.character.escape.line-continuation.spl"
						}
					}
				}
			]
		},
		"keywords": {
			"match": "\\b(else|if|return|while)\\b",
			"name": "keyword.control.spl"
		},
		"function_arrow": {
			"match": "->",
			"name": "punctuation.function.return.spl"
		},
		"semicolon": {
			"match": ";",
			"name": "punctuation.terminator.statement.spl"
		},
		"cons": {
			"match": "[^:]:[^:]",
			"name": "keyword.operator.logical.spl"
		},
		"comma": {
			"match": ",",
			"name": "punctuation.separator.delimiter.spl"
		},
		"bools": {
			"match": "\\b(True|False)\\b",
			"name": "constant.language.spl"
		},
		"operators": {
			"patterns": [
				{
					"match": "!=|<=|>=|==|<|>",
					"name": "keyword.operator.comparison.spl"
				},
				{
					"match": "&&|!|\\|\\|",
					"name": "keyword.operator.logical.spl"
				},
				{
					"match": "=",
					"name": "keyword.operator.assignment.spl"
				},
				{
					"match": "%|\\*|/|-|\\+",
					"name": "keyword.operator.spl"
				}
			]
		},
		"parameter": {
			"match": "([a-zA-Z_]\\w*)\\s*(?=(?:,|\\)|\\]))",
			"captures": {
				"1": {
					"name": "variable.parameter.spl"
				}
			}
		},
		"parametertype": {
			"match": "([a-zA-Z_]\\w*)\\s*",
			"captures": {
				"1": {
					"name": "variable.parameter.spl"
				}
			}
		},
		"storage_types": {
			"patterns": [
				{
					"match": "(?-mix:(?<!\\w)(?:Void|Char|Bool|Int|var)(?!\\w))",
					"name": "storage.type.spl"
				}
			]
		},
		"string_escaped_char": {
			"patterns": [
				{
					"match": "(?x)\\\\ (\n\\\\\t\t\t |\n[abefnprtv'\"?]   |\n[0-3]\\d{,2}\t |\n[4-7]\\d?\t\t|\nx[a-fA-F0-9]{,2} |\nu[a-fA-F0-9]{,4} |\nU[a-fA-F0-9]{,8} )",
					"name": "constant.character.escape.spl"
				},
				{
					"match": "\\\\.",
					"name": "invalid.illegal.unknown-escape.spl"
				}
			]
		},
		"numbers": {
			"match": "(?<!\\w)\\.?\\d(?:(?:[0-9a-zA-Z_\\.]|')|(?<=[eEpP])[+-])*",
			"captures": {
				"0": {
					"patterns": [
						{
							"begin": "(?=.)",
							"end": "$",
							"patterns": [
								{
									"match": "(\\G0[xX])([0-9a-fA-F](?:[0-9a-fA-F]|((?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)?((?:(?<=[0-9a-fA-F])\\.|\\.(?=[0-9a-fA-F])))([0-9a-fA-F](?:[0-9a-fA-F]|((?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)?((?<!')([pP])(\\+?)(\\-?)((?:[0-9](?:[0-9]|(?:(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)))?([lLfF](?!\\w))?$",
									"captures": {
										"1": {
											"name": "keyword.other.unit.hexadecimal.spl"
										},
										"2": {
											"name": "constant.numeric.hexadecimal.spl",
											"patterns": [
												{
													"match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
													"name": "punctuation.separator.constant.numeric"
												}
											]
										},
										"3": {
											"name": "punctuation.separator.constant.numeric"
										},
										"4": {
											"name": "constant.numeric.hexadecimal.spl"
										},
										"5": {
											"name": "constant.numeric.hexadecimal.spl",
											"patterns": [
												{
													"match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
													"name": "punctuation.separator.constant.numeric"
												}
											]
										},
										"6": {
											"name": "punctuation.separator.constant.numeric"
										},
										"8": {
											"name": "keyword.other.unit.exponent.hexadecimal.spl"
										},
										"9": {
											"name": "keyword.operator.plus.exponent.hexadecimal.spl"
										},
										"10": {
											"name": "keyword.operator.minus.exponent.hexadecimal.spl"
										},
										"11": {
											"name": "constant.numeric.exponent.hexadecimal.spl",
											"patterns": [
												{
													"match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
													"name": "punctuation.separator.constant.numeric"
												}
											]
										},
										"12": {
											"name": "keyword.other.unit.suffix.floating-point.spl"
										}
									}
								},
								{
									"match": "(\\G(?=[0-9.])(?!0[xXbB]))([0-9](?:[0-9]|((?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)?((?:(?<=[0-9])\\.|\\.(?=[0-9])))([0-9](?:[0-9]|((?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)?((?<!')([eE])(\\+?)(\\-?)((?:[0-9](?:[0-9]|(?:(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)))?([lLfF](?!\\w))?$",
									"captures": {
										"2": {
											"name": "constant.numeric.decimal.spl",
											"patterns": [
												{
													"match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
													"name": "punctuation.separator.constant.numeric"
												}
											]
										},
										"3": {
											"name": "punctuation.separator.constant.numeric"
										},
										"4": {
											"name": "constant.numeric.decimal.point.spl"
										},
										"5": {
											"name": "constant.numeric.decimal.spl",
											"patterns": [
												{
													"match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
													"name": "punctuation.separator.constant.numeric"
												}
											]
										},
										"6": {
											"name": "punctuation.separator.constant.numeric"
										},
										"8": {
											"name": "keyword.other.unit.exponent.decimal.spl"
										},
										"9": {
											"name": "keyword.operator.plus.exponent.decimal.spl"
										},
										"10": {
											"name": "keyword.operator.minus.exponent.decimal.spl"
										},
										"11": {
											"name": "constant.numeric.exponent.decimal.spl",
											"patterns": [
												{
													"match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
													"name": "punctuation.separator.constant.numeric"
												}
											]
										},
										"12": {
											"name": "keyword.other.unit.suffix.floating-point.spl"
										}
									}
								},
								{
									"match": "(\\G0[bB])([01](?:[01]|((?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)((?:(?:(?:(?:(?:[uU]|[uU]ll?)|[uU]LL?)|ll?[uU]?)|LL?[uU]?)|[fF])(?!\\w))?$",
									"captures": {
										"1": {
											"name": "keyword.other.unit.binary.spl"
										},
										"2": {
											"name": "constant.numeric.binary.spl",
											"patterns": [
												{
													"match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
													"name": "punctuation.separator.constant.numeric"
												}
											]
										},
										"3": {
											"name": "punctuation.separator.constant.numeric"
										},
										"4": {
											"name": "keyword.other.unit.suffix.integer.spl"
										}
									}
								},
								{
									"match": "(\\G0)((?:[0-7]|((?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))+)((?:(?:(?:(?:(?:[uU]|[uU]ll?)|[uU]LL?)|ll?[uU]?)|LL?[uU]?)|[fF])(?!\\w))?$",
									"captures": {
										"1": {
											"name": "keyword.other.unit.octal.spl"
										},
										"2": {
											"name": "constant.numeric.octal.spl",
											"patterns": [
												{
													"match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
													"name": "punctuation.separator.constant.numeric"
												}
											]
										},
										"3": {
											"name": "punctuation.separator.constant.numeric"
										},
										"4": {
											"name": "keyword.other.unit.suffix.integer.spl"
										}
									}
								},
								{
									"match": "(\\G0[xX])([0-9a-fA-F](?:[0-9a-fA-F]|((?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)((?<!')([pP])(\\+?)(\\-?)((?:[0-9](?:[0-9]|(?:(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)))?((?:(?:(?:(?:(?:[uU]|[uU]ll?)|[uU]LL?)|ll?[uU]?)|LL?[uU]?)|[fF])(?!\\w))?$",
									"captures": {
										"1": {
											"name": "keyword.other.unit.hexadecimal.spl"
										},
										"2": {
											"name": "constant.numeric.hexadecimal.spl",
											"patterns": [
												{
													"match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
													"name": "punctuation.separator.constant.numeric"
												}
											]
										},
										"3": {
											"name": "punctuation.separator.constant.numeric"
										},
										"5": {
											"name": "keyword.other.unit.exponent.hexadecimal.spl"
										},
										"6": {
											"name": "keyword.operator.plus.exponent.hexadecimal.spl"
										},
										"7": {
											"name": "keyword.operator.minus.exponent.hexadecimal.spl"
										},
										"8": {
											"name": "constant.numeric.exponent.hexadecimal.spl",
											"patterns": [
												{
													"match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
													"name": "punctuation.separator.constant.numeric"
												}
											]
										},
										"9": {
											"name": "keyword.other.unit.suffix.integer.spl"
										}
									}
								},
								{
									"match": "(\\G(?=[0-9.])(?!0[xXbB]))([0-9](?:[0-9]|((?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)((?<!')([eE])(\\+?)(\\-?)((?:[0-9](?:[0-9]|(?:(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)))?((?:(?:(?:(?:(?:[uU]|[uU]ll?)|[uU]LL?)|ll?[uU]?)|LL?[uU]?)|[fF])(?!\\w))?$",
									"captures": {
										"2": {
											"name": "constant.numeric.decimal.spl",
											"patterns": [
												{
													"match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
													"name": "punctuation.separator.constant.numeric"
												}
											]
										},
										"3": {
											"name": "punctuation.separator.constant.numeric"
										},
										"5": {
											"name": "keyword.other.unit.exponent.decimal.spl"
										},
										"6": {
											"name": "keyword.operator.plus.exponent.decimal.spl"
										},
										"7": {
											"name": "keyword.operator.minus.exponent.decimal.spl"
										},
										"8": {
											"name": "constant.numeric.exponent.decimal.spl",
											"patterns": [
												{
													"match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
													"name": "punctuation.separator.constant.numeric"
												}
											]
										},
										"9": {
											"name": "keyword.other.unit.suffix.integer.spl"
										}
									}
								},
								{
									"match": "(?:(?:[0-9a-zA-Z_\\.]|')|(?<=[eEpP])[+-])+",
									"name": "invalid.illegal.constant.numeric"
								}
							]
						}
					]
				}
			}
		},
		"strings": {
			"patterns": [
				{
					"begin": "\"",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.spl"
						}
					},
					"end": "\"",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end.spl"
						}
					},
					"name": "string.quoted.double.spl",
					"patterns": [
						{
							"include": "#string_escaped_char"
						},
						{
							"include": "#string_placeholder"
						},
						{
							"include": "#line_continuation_character"
						}
					]
				},
				{
					"begin": "'",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.spl"
						}
					},
					"end": "'",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end.spl"
						}
					},
					"name": "string.quoted.single.spl",
					"patterns": [
						{
							"include": "#string_escaped_char"
						},
						{
							"include": "#line_continuation_character"
						}
					]
				}
			]
		}
	}
}